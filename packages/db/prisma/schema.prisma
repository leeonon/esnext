generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id                 Int                   @id @default(autoincrement())
  name               String
  fullName           String                @map("full_name")
  description        String
  homePage           String?               @map("home_page")
  stars              Int
  projectCreateTime  DateTime?             @map("project_create_time")
  lastCommitTime     DateTime?             @map("last_commit_time")
  version            String?
  versionUpdateTime  DateTime?             @map("version_update_time")
  logo               String?
  owner              String?
  license            String
  readme             ProjectReadme?
  categories         CategoriesOnProject[]
  projectInFavorites ProjectInFavorites[]

  @@map("projects")
}

model ProjectReadme {
  id        Int     @id @default(autoincrement())
  content   String  @db.MediumText
  projectId Int     @unique @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_readme")
}

model Categories {
  id       Int                   @id @default(autoincrement())
  name     String                @unique
  projects CategoriesOnProject[]

  @@map("categories")
}

model CategoriesOnProject {
  categoriesId Int        @map("categories_id")
  projectId    Int        @map("project_id")
  categories   Categories @relation(fields: [categoriesId], references: [id], onDelete: Cascade)
  project      Project    @relation(fields: [projectId], references: [id])

  @@id([categoriesId, projectId])
  @@map("categories_on_project")
}

model Example {
  id           Int    @id @default(autoincrement())
  description  String
  fullName     String @map("full_name")
  name         String
  ownerId      Int    @map("owner_id")
  slug         String
  stars        Int
  categoriesId String

  @@index([name])
  @@map("examples")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorites[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Favorites {
  id          Int                  @id @default(autoincrement())
  name        String // 收藏夹名称
  description String? // 收藏夹描述
  user        User                 @relation(fields: [userId], references: [id])
  userId      String // 关联到 User
  projects    ProjectInFavorites[]

  @@unique([userId, name])
  @@map("favorites")
}

model ProjectInFavorites {
  id          Int       @id @default(autoincrement())
  favorites   Favorites @relation(fields: [favoritesId], references: [id])
  favoritesId Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int

  @@unique([projectId, favoritesId])
  @@map("projects_in_favorites")
}
